{"version":3,"sources":["apollo.js","queries/GetDatasets.js","App.js","serviceWorker.js","index.js"],"names":["ApolloClient","uri","GET_DATASETS","gql","ORDERBY_DATE_ASC","availableLines","labels","colors","reduce","map","obj","randomcolor","luminosity","App","props","handleCheckboxChange","event","setState","state","target","name","checked","setGraphScale","value","graphScale","this","Object","keys","filter","item","p","c","data","chartData","datasets","nodes","forEach","set","_","dataset","date","split","total_deaths","totalDeaths","total_tests","totalTests","positive_tests","positiveTests","negative_tests","negativeTests","ayrshireandarran_cases","ayrshireandarranCases","borders_cases","bordersCases","dumfriesandgalloway_cases","dumfriesandgallowayCases","fife_cases","forthvalley_cases","forthvalleyCases","grampian_cases","grampianCases","greaterglasgowandclyde_cases","greaterglasgowandclydeCases","highland_cases","highlandCases","lanarkshire_cases","lanarkshireCases","lothian_cases","lothianCases","orkney_cases","orkneyCases","shetland_cases","shetlandCases","tayside_cases","taysideCases","push","client","query","variables","loading","refetch","Grid","container","sm","style","textAlign","margin","Typography","variant","Paper","marginLeft","FormGroup","padding","line","FormControlLabel","control","Checkbox","onChange","label","key","ButtonGroup","color","width","Button","onClick","selectAllChannels","RadioGroup","row","aria-label","FormLabel","display","alignItems","justifyContent","marginRight","Radio","transformChartData","top","right","bottom","stroke","contentStyle","background","dataKey","scale","domain","type","BottomNavigation","position","maxHeight","BottomNavigationAction","icon","href","React","Component","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","theme","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAEe,M,OAAIA,GACjB,CACEC,IAAK,+C,2zBCFF,IAAMC,E,MAAeC,GAAH,KA0BZC,EAAmB,CAAC,MAAS,CAAC,KAAQ,QChB7CC,EAAiB,CACrB,cACA,eACA,iBACA,iBACA,yBACA,gBACA,4BACA,aACA,oBACA,iBACA,+BACA,iBACA,oBACA,gBACA,eACA,iBACA,iBAGIC,EAAS,CACb,YAAe,cACf,aAAgB,eAChB,eAAkB,iBAClB,eAAkB,iBAClB,uBAA0B,2BAC1B,cAAiB,gBACjB,0BAA6B,8BAC7B,WAAc,aACd,kBAAqB,qBACrB,eAAkB,iBAClB,6BAAgC,kCAChC,eAAkB,iBAClB,kBAAqB,oBACrB,cAAiB,gBACjB,aAAgB,eAChB,eAAkB,iBAClB,cAAiB,iBAGbC,EAASF,EAAeG,QAAO,SAACC,EAAKC,GAEzC,OADAD,EAAIC,GAAOC,IAAY,CAAEC,WAAY,UAC9BH,IACN,IAwHYI,E,kDApHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA2CRC,qBAAuB,SAACC,GACtB,EAAKC,SAAL,eAAmB,EAAKC,MAAxB,eAAgCF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,YA7ChD,EAgDnBC,cAAgB,SAACN,GACf,EAAKC,SAAL,eAAiBD,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOI,SA7ClD,EAAKL,MAAQb,EAAeG,QAAO,SAACC,EAAKC,GAGvC,OADAD,EADUC,EAAM,aACL,EACJD,IACN,IACH,EAAKS,MAAMM,WAAa,SATP,E,8DAYDD,GAChBE,KAAKR,SAASS,OAAOC,KAAKF,KAAKP,OAAOU,QAAO,SAAAC,GAAI,MAAa,eAATA,KAAuBrB,QAAO,SAACsB,EAAGC,GAAJ,sBAAgBD,EAAhB,eAAoBC,EAAIR,MAAU,O,yCAGpGS,GACjB,IAAIC,EAAY,GAwBhB,OAvBAD,EAAKE,SAASC,MAAMC,SAAQ,SAACC,EAAKC,GAChC,IAAIC,EAAU,CACZC,KAAMH,EAAIG,KAAKC,MAAM,KAAK,GAC1BC,aAAcL,EAAIM,YAClBC,YAAaP,EAAIQ,WACjBC,eAAgBT,EAAIU,cACpBC,eAAgBX,EAAIY,cACpBC,uBAAwBb,EAAIc,sBAC5BC,cAAef,EAAIgB,aACnBC,0BAA2BjB,EAAIkB,yBAC/BC,WAAYnB,EAAIkB,yBAChBE,kBAAmBpB,EAAIqB,iBACvBC,eAAgBtB,EAAIuB,cACpBC,6BAA8BxB,EAAIyB,4BAClCC,eAAgB1B,EAAI2B,cACpBC,kBAAmB5B,EAAI6B,iBACvBC,cAAe9B,EAAI+B,aACnBC,aAAchC,EAAIiC,YAClBC,eAAgBlC,EAAImC,cACpBC,cAAepC,EAAIqC,cAErBzC,EAAU0C,KAAKpC,MAEVN,I,+BAWC,IAAD,OACP,OACE,kBAAC,IAAD,CAAgB2C,OAAQA,GACtB,kBAAC,IAAD,CAAOC,MAAO3E,EAAc4E,UAAW1E,IACpC,gBAAG2E,EAAH,EAAGA,QAAS/C,EAAZ,EAAYA,KAAZ,EAAkBgD,QAAlB,OAAiCD,GAChC,kBAACE,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMpD,MAAI,EAACsD,GAAI,GAAIC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,IACvD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,0BAEF,kBAACP,EAAA,EAAD,CAAMpD,MAAI,EAACsD,GAAI,GACb,kBAACM,EAAA,EAAD,CAAOL,MAAO,CAAEM,WAAY,KAC1B,kBAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEC,UAAW,SAAUC,OAAQ,IAA/D,iBACA,kBAACK,EAAA,EAAD,CAAWP,MAAO,CAAEQ,QAAS,IAC1BvF,EAAeI,KAAI,SAAAoF,GAAI,OAEpB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAU3E,QAAS,EAAKH,MAAM2E,EAAO,YAAaI,SAAU,EAAKlF,qBAAsBK,KAAMyE,EAAO,aAC7GK,MAAO5F,EAAOuF,GACdM,IAAKN,OAGX,kBAACO,EAAA,EAAD,CAAaZ,QAAQ,YAAYa,MAAM,UAAUjB,MAAO,CAAEkB,MAAO,SAC/D,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,mBAAkB,IAAOrB,MAAO,CAAEkB,MAAO,SAArE,cACA,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAM,EAAKC,mBAAkB,IAAQrB,MAAO,CAAEkB,MAAO,SAAtE,iBAEF,kBAACI,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,cAAcxF,KAAK,aAAaG,MAAO,EAAKL,MAAMM,WAAYyE,SAAU,EAAK3E,eACtG,kBAACuF,EAAA,EAAD,CAAWzB,MAAO,CAAC0B,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,YAAa,GAAIvB,WAAY,KAC/G,kBAACH,EAAA,EAAD,CAAYC,QAAQ,UAApB,WAEF,kBAACM,EAAA,EAAD,CAAkBvE,MAAM,MAAMwE,QAAS,kBAACmB,EAAA,EAAD,MAAWhB,MAAM,QACxD,kBAACJ,EAAA,EAAD,CAAkBvE,MAAM,SAASwE,QAAS,kBAACmB,EAAA,EAAD,MAAWhB,MAAM,eAKnE,kBAACjB,EAAA,EAAD,CAAMpD,MAAI,EAACsD,GAAI,IACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWnD,KAAM,EAAKmF,mBAAmBnF,GAAOsD,OAAQ,CAAE8B,IAAK,EAAGC,MAAO,GAAIC,OAAQ,IACnF,kBAAC,IAAD,CAAeC,OAAO,SACtB,kBAAC,IAAD,CAASC,aAAc,CAAEC,WAAY,aACrC,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,CAAOC,MAAO,EAAKzG,MAAMM,WAAYoG,OAAQ,CAAC,OAAQ,UACrDvH,EACEuB,QAAO,SAAAiE,GAAI,OAAsC,IAAlC,EAAK3E,MAAM2E,EAAO,eACjCpF,KAAI,SAAAoF,GAAI,OAEL,kBAAC,IAAD,CAAMgC,KAAK,WAAWH,QAAS7B,EAAMzE,KAAMd,EAAOuF,GAAO0B,OAAQhH,EAAOsF,GAAOM,IAAKN,UAKhG,kBAACZ,EAAA,EAAD,CAAMpD,MAAI,EAACsD,GAAI,IACb,kBAAC2C,EAAA,EAAD,CAAkB1C,MAAO,CAAEkB,MAAO,OAAQyB,SAAU,QAAST,OAAQ,EAAGU,UAAW,KACjF,kBAACC,EAAA,EAAD,CAAwBC,KAAM,kBAAC,IAAD,MAAgBC,KAAK,iE,GA3GnDC,IAAMC,WC7CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+BCVAC,EAAYC,YAAe,CAC/BC,QAAS,CACPhB,KAAM,UAIViB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAeC,MAAOP,GACpB,kBAACQ,EAAA,EAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f893c2c6.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient(\r\n  {\r\n    uri: \"https://scotgovcovidweb.azurewebsites.net/\",\r\n  }\r\n);","import gql from 'graphql-tag';\r\n\r\nexport const GET_DATASETS = gql`query GetDatasets($order: DatasetsSort!){\r\n    datasets(order_by: $order)\r\n    {\r\n      nodes{\r\n        date,\r\n        totalTests,\r\n        totalDeaths,\r\n        positiveTests,\r\n        negativeTests,\r\n          ayrshireandarranCases,\r\n          bordersCases,\r\n          dumfriesandgallowayCases,\r\n          fifeCases,\r\n          forthvalleyCases,\r\n          grampianCases,\r\n          greaterglasgowandclydeCases,\r\n          highlandCases,\r\n          lanarkshireCases,\r\n          lothianCases,\r\n          orkneyCases,\r\n          shetlandCases,\r\n          taysideCases\r\n      }\r\n    }\r\n  }`;\r\n\r\nexport const ORDERBY_DATE_ASC = {\"order\": {\"date\": \"ASC\" }};","import React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport client from './apollo';\nimport {\n  FormControlLabel, FormGroup, Checkbox, Grid, Typography, Paper, Button, ButtonGroup,\n  BottomNavigation, BottomNavigationAction, Radio, RadioGroup, FormLabel\n} from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport randomcolor from 'randomcolor';\nimport { GET_DATASETS, ORDERBY_DATE_ASC } from './queries/GetDatasets'\n\nconst availableLines = [\n  \"total_tests\",\n  \"total_deaths\",\n  \"positive_tests\",\n  \"negative_tests\",\n  \"ayrshireandarran_cases\",\n  \"borders_cases\",\n  \"dumfriesandgalloway_cases\",\n  \"fife_cases\",\n  \"forthvalley_cases\",\n  \"grampian_cases\",\n  \"greaterglasgowandclyde_cases\",\n  \"highland_cases\",\n  \"lanarkshire_cases\",\n  \"lothian_cases\",\n  \"orkney_cases\",\n  \"shetland_cases\",\n  \"tayside_cases\"\n]\n\nconst labels = {\n  \"total_tests\": \"Total Tests\",\n  \"total_deaths\": \"Total Deaths\",\n  \"positive_tests\": \"Positive Tests\",\n  \"negative_tests\": \"Negative Tests\",\n  \"ayrshireandarran_cases\": \"Ayrshire and Arran Cases\",\n  \"borders_cases\": \"Borders Cases\",\n  \"dumfriesandgalloway_cases\": \"Dumfries and Galloway Cases\",\n  \"fife_cases\": \"Fife Cases\",\n  \"forthvalley_cases\": \"Forth Valley Cases\",\n  \"grampian_cases\": \"Grampian Cases\",\n  \"greaterglasgowandclyde_cases\": \"Greater Glasgow and Clyde Cases\",\n  \"highland_cases\": \"Highland Cases\",\n  \"lanarkshire_cases\": \"Lanarkshire Cases\",\n  \"lothian_cases\": \"Lothian Cases\",\n  \"orkney_cases\": \"Orkney Cases\",\n  \"shetland_cases\": \"Shetland Cases\",\n  \"tayside_cases\": \"Tayside Cases\"\n};\n\nconst colors = availableLines.reduce((map, obj) => {\n  map[obj] = randomcolor({ luminosity: 'light' });\n  return map;\n}, {});\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // build state checkbox items out of the available data\n    this.state = availableLines.reduce((map, obj) => {\n      var key = obj + \"_enabled\";\n      map[key] = false;\n      return map;\n    }, {});\n    this.state.graphScale = 'linear';\n  }\n\n  selectAllChannels(value) {\n    this.setState(Object.keys(this.state).filter(item => item !== 'graphScale').reduce((p, c) => ({ ...p, [c]: value }), {}));\n  }\n\n  transformChartData(data) {\n    let chartData = [];\n    data.datasets.nodes.forEach((set, _) => {\n      let dataset = {\n        date: set.date.split(\"T\")[0],\n        total_deaths: set.totalDeaths,\n        total_tests: set.totalTests,\n        positive_tests: set.positiveTests,\n        negative_tests: set.negativeTests,\n        ayrshireandarran_cases: set.ayrshireandarranCases,\n        borders_cases: set.bordersCases,\n        dumfriesandgalloway_cases: set.dumfriesandgallowayCases,\n        fife_cases: set.dumfriesandgallowayCases,\n        forthvalley_cases: set.forthvalleyCases,\n        grampian_cases: set.grampianCases,\n        greaterglasgowandclyde_cases: set.greaterglasgowandclydeCases,\n        highland_cases: set.highlandCases,\n        lanarkshire_cases: set.lanarkshireCases,\n        lothian_cases: set.lothianCases,\n        orkney_cases: set.orkneyCases,\n        shetland_cases: set.shetlandCases,\n        tayside_cases: set.taysideCases,\n      }\n      chartData.push(dataset);\n    })\n    return chartData;\n  }\n\n  handleCheckboxChange = (event) => {\n    this.setState({ ...this.state, [event.target.name]: event.target.checked });\n  };\n\n  setGraphScale = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Query query={GET_DATASETS} variables={ORDERBY_DATE_ASC}>\n          {({ loading, data, refetch }) => !loading && (\n            <Grid container>\n              <Grid item sm={12} style={{ textAlign: \"center\", margin: 5 }}>\n                <Typography variant=\"h3\">ScotGov COVID-19 Data</Typography>\n              </Grid>\n              <Grid item sm={2}>\n                <Paper style={{ marginLeft: 30 }}>\n                  <Typography variant=\"h6\" style={{ textAlign: \"center\", margin: 5 }}>Data Channels</Typography>\n                  <FormGroup style={{ padding: 5 }}>\n                    {availableLines.map(line =>\n                      (\n                        <FormControlLabel\n                          control={<Checkbox checked={this.state[line + \"_enabled\"]} onChange={this.handleCheckboxChange} name={line + \"_enabled\"} />}\n                          label={labels[line]}\n                          key={line}\n                        />\n                      ))}\n                    <ButtonGroup variant=\"contained\" color=\"primary\" style={{ width: \"100%\" }}>\n                      <Button onClick={() => this.selectAllChannels(true)} style={{ width: \"100%\" }}>Select all</Button>\n                      <Button onClick={() => this.selectAllChannels(false)} style={{ width: \"100%\" }}>Deselect all</Button>\n                    </ButtonGroup>\n                    <RadioGroup row aria-label=\"graph-scale\" name=\"graphScale\" value={this.state.graphScale} onChange={this.setGraphScale}>\n                      <FormLabel style={{display: 'flex', alignItems: 'center', justifyContent: 'center', marginRight: 20, marginLeft: 10 }}>\n                        <Typography variant=\"button\">Scale:</Typography>\n                      </FormLabel>\n                      <FormControlLabel value=\"log\" control={<Radio />} label=\"log\" />\n                      <FormControlLabel value=\"linear\" control={<Radio />} label=\"linear\" />\n                    </RadioGroup>\n                  </FormGroup>\n                </Paper>\n              </Grid>\n              <Grid item sm={10}>\n                <ResponsiveContainer>\n                  <LineChart data={this.transformChartData(data)} margin={{ top: 5, right: 30, bottom: 5 }}>\n                    <CartesianGrid stroke=\"#ccc\" />\n                    <Tooltip contentStyle={{ background: '#424242' }} />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis scale={this.state.graphScale} domain={['auto', 'auto']} />\n                    {availableLines\n                      .filter(line => this.state[line + \"_enabled\"] === true)\n                      .map(line =>\n                        (\n                          <Line type=\"monotone\" dataKey={line} name={labels[line]} stroke={colors[line]} key={line} />\n                        ))}\n                  </LineChart>\n                </ResponsiveContainer>\n              </Grid>\n              <Grid item sm={12}>\n                <BottomNavigation style={{ width: '100%', position: 'fixed', bottom: 0, maxHeight: 45 }}>\n                  <BottomNavigationAction icon={<GitHubIcon />} href=\"https://github.com/dillanmann/scotgov-covid-chart\"></BottomNavigationAction>\n                </BottomNavigation>\n              </Grid>\n            </Grid>\n          )}\n        </Query>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme, CssBaseline } from \"@material-ui/core\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline>\n        <App />\n      </CssBaseline>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}