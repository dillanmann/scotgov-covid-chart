{"version":3,"sources":["apollo.js","queries/GetDatasets.js","App.js","serviceWorker.js","index.js"],"names":["ApolloClient","uri","GET_DATASETS","gql","ORDERBY_DATE_ASC","allDataChannels","labels","colors","reduce","map","obj","randomcolor","luminosity","App","props","handleCheckboxChange","event","setState","state","target","name","checked","setGraphScale","value","graphScale","this","Object","keys","filter","item","p","c","data","chartData","scrapedDatasets","nodes","forEach","set","_","dataset","date","split","calculatedSet","calculatedDatasets","find","e","selectedChannels","endsWith","every","i","push","client","query","variables","loading","refetch","Grid","container","xs","style","textAlign","margin","Typography","variant","Paper","marginLeft","FormGroup","padding","line","FormControlLabel","control","Checkbox","onChange","label","key","ButtonGroup","color","width","Button","onClick","selectAllChannels","RadioGroup","row","aria-label","FormLabel","display","alignItems","justifyContent","marginRight","Radio","height","transformChartData","top","right","bottom","stroke","contentStyle","background","dataKey","scale","domain","type","BottomNavigation","position","maxHeight","BottomNavigationAction","icon","GitHub","href","Twitter","React","Component","Boolean","window","location","hostname","match","theme","responsiveFontSizes","createMuiTheme","palette","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.267b496e.chunk.js","sourcesContent":["import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient(\r\n  {\r\n    uri: \"https://scotgovcovidweb.azurewebsites.net/\",\r\n  }\r\n);","import gql from 'graphql-tag';\r\n\r\nexport const GET_DATASETS = gql`query GetDatasets($scrapedOrder: ScrapedDataSort!, $calculatedOrder: CalculatedDataSort!){\r\n  scrapedDatasets(order_by: $scrapedOrder)\r\n    {\r\n      nodes{\r\n        date,\r\n        totalTests,\r\n        totalDeaths,\r\n        positiveTests,\r\n        negativeTests,\r\n          ayrshireandarranCases,\r\n          bordersCases,\r\n          dumfriesandgallowayCases,\r\n          fifeCases,\r\n          forthvalleyCases,\r\n          grampianCases,\r\n          greaterglasgowandclydeCases,\r\n          highlandCases,\r\n          lanarkshireCases,\r\n          lothianCases,\r\n          orkneyCases,\r\n          shetlandCases,\r\n          taysideCases\r\n      }\r\n    }\r\n    calculatedDatasets(order_by: $calculatedOrder){\r\n      nodes{\r\n        date,\r\n        dailyDeaths\r\n      }\r\n    }\r\n    \r\n  }`;\r\n\r\nexport const ORDERBY_DATE_ASC = {\"scrapedOrder\": {\"date\": \"ASC\" }, \"calculatedOrder\": {\"date\": \"ASC\" }};","import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { ApolloProvider, Query } from 'react-apollo';\r\nimport client from './apollo';\r\nimport {\r\n  FormControlLabel, FormGroup, Checkbox, Grid, Typography, Paper, Button, ButtonGroup,\r\n  BottomNavigation, BottomNavigationAction, Radio, RadioGroup, FormLabel\r\n} from '@material-ui/core';\r\nimport { GitHub, Twitter } from '@material-ui/icons';\r\nimport randomcolor from 'randomcolor';\r\nimport { GET_DATASETS, ORDERBY_DATE_ASC } from './queries/GetDatasets'\r\n\r\nconst allDataChannels = [\r\n  \"totalTests\",\r\n  \"totalDeaths\",\r\n  \"dailyDeaths\",\r\n  \"positiveTests\",\r\n  \"negativeTests\",\r\n  \"ayrshireandarranCases\",\r\n  \"bordersCases\",\r\n  \"dumfriesandgallowayCases\",\r\n  \"fifeCases\",\r\n  \"forthvalleyCases\",\r\n  \"grampianCases\",\r\n  \"greaterglasgowandclydeCases\",\r\n  \"highlandCases\",\r\n  \"lanarkshireCases\",\r\n  \"lothianCases\",\r\n  \"orkneyCases\",\r\n  \"shetlandCases\",\r\n  \"taysideCases\"\r\n]\r\n\r\nconst labels = {\r\n  \"totalTests\": \"Total Tests\",\r\n  \"totalDeaths\": \"Total Deaths\",\r\n  \"dailyDeaths\": \"Daily Deaths\",\r\n  \"positiveTests\": \"Positive Tests\",\r\n  \"negativeTests\": \"Negative Tests\",\r\n  \"ayrshireandarranCases\": \"Ayrshire and Arran Cases\",\r\n  \"bordersCases\": \"Borders Cases\",\r\n  \"dumfriesandgallowayCases\": \"Dumfries and Galloway Cases\",\r\n  \"fifeCases\": \"Fife Cases\",\r\n  \"forthvalleyCases\": \"Forth Valley Cases\",\r\n  \"grampianCases\": \"Grampian Cases\",\r\n  \"greaterglasgowandclydeCases\": \"Greater Glasgow and Clyde Cases\",\r\n  \"highlandCases\": \"Highland Cases\",\r\n  \"lanarkshireCases\": \"Lanarkshire Cases\",\r\n  \"lothianCases\": \"Lothian Cases\",\r\n  \"orkneyCases\": \"Orkney Cases\",\r\n  \"shetlandCases\": \"Shetland Cases\",\r\n  \"taysideCases\": \"Tayside Cases\"\r\n};\r\n\r\n\r\nconst colors = allDataChannels.reduce((map, obj) => {\r\n  map[obj] = randomcolor({ luminosity: 'light' });\r\n  return map;\r\n}, {});\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // build state checkbox items out of the available data\r\n    this.state = allDataChannels.reduce((map, obj) => {\r\n      var key = obj + \"_enabled\";\r\n      map[key] = false;\r\n      return map;\r\n    }, {});\r\n    this.state.graphScale = 'linear';\r\n  }\r\n\r\n  selectAllChannels(value) {\r\n    this.setState(Object.keys(this.state).filter(item => item !== 'graphScale').reduce((p, c) => ({ ...p, [c]: value }), {}));\r\n  }\r\n\r\n  transformChartData(data) {\r\n    let chartData = [];\r\n    data.scrapedDatasets.nodes.forEach((set, _) => {\r\n      var dataset = allDataChannels.reduce((map, obj) => {\r\n        map[obj] = set[obj];\r\n        return map;\r\n      }, {});\r\n      var date = set.date.split(\"T\")[0];\r\n      dataset['date'] = date;\r\n\r\n      var calculatedSet = data.calculatedDatasets.nodes.find((e) => e.date.split('T')[0] === date);\r\n      if (calculatedSet){\r\n        dataset['dailyDeaths'] = calculatedSet['dailyDeaths'];\r\n      }\r\n\r\n      var selectedChannels = \r\n        Object.keys(this.state)\r\n        .filter(item => item.endsWith('_enabled') && this.state[item] === true);\r\n\r\n      if (this.state.graphScale === \"linear\"\r\n        || selectedChannels.every(i => dataset[i] !== 0)){\r\n          chartData.push(dataset);\r\n        }\r\n    })\r\n    return chartData;\r\n  }\r\n\r\n  handleCheckboxChange = (event) => {\r\n    this.setState({ ...this.state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  setGraphScale = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <Query query={GET_DATASETS} variables={ORDERBY_DATE_ASC}>\r\n          {({ loading, data, refetch }) => !loading && (\r\n            <Grid container>\r\n              <Grid item xs={12} style={{ textAlign: \"center\", margin: 5 }}>\r\n                <Typography variant=\"h3\">ScotGov COVID-19 Data</Typography>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <Paper style={{ marginLeft: 30 }}>\r\n                  <Typography variant=\"h6\" style={{ textAlign: \"center\", margin: 5 }}>Data Channels</Typography>\r\n                  <FormGroup style={{ padding: 5 }}>\r\n                    {allDataChannels.map(line =>\r\n                      (\r\n                        <FormControlLabel\r\n                          control={<Checkbox checked={this.state[line + \"_enabled\"]} onChange={this.handleCheckboxChange} name={line + \"_enabled\"} />}\r\n                          label={<Typography variant=\"caption\">{labels[line]}</Typography>}\r\n                          key={line}\r\n                        />\r\n                      ))}\r\n                    <ButtonGroup variant=\"contained\" color=\"primary\" style={{ width: \"100%\" }}>\r\n                      <Button onClick={() => this.selectAllChannels(true)} style={{ width: \"100%\" }}>Select all</Button>\r\n                      <Button onClick={() => this.selectAllChannels(false)} style={{ width: \"100%\" }}>Deselect all</Button>\r\n                    </ButtonGroup>\r\n                    <RadioGroup row aria-label=\"graph-scale\" name=\"graphScale\" value={this.state.graphScale} onChange={this.setGraphScale}>\r\n                      <FormLabel style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginRight: 20, marginLeft: 10 }}>\r\n                        <Typography variant=\"button\">Scale:</Typography>\r\n                      </FormLabel>\r\n                      <FormControlLabel value=\"log\" control={<Radio />} label=\"log\" />\r\n                      <FormControlLabel value=\"linear\" control={<Radio />} label=\"linear\" />\r\n                    </RadioGroup>\r\n                  </FormGroup>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={10}>\r\n                <ResponsiveContainer width=\"99%\" height=\"99%\">\r\n                  <LineChart data={this.transformChartData(data)} margin={{ top: 5, right: 50, bottom: 5 }}>\r\n                    <CartesianGrid stroke=\"#ccc\" />\r\n                    <Tooltip contentStyle={{ background: '#424242' }} />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis scale={this.state.graphScale} domain={['1', 'auto']} />\r\n                    {allDataChannels\r\n                      .filter(line => this.state[line + \"_enabled\"] === true)\r\n                      .map(line =>\r\n                        (\r\n                          <Line type=\"monotone\" dataKey={line} name={labels[line]} stroke={colors[line]} key={line} />\r\n                        ))}\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <BottomNavigation style={{ width: '100%', position: 'fixed', bottom: 0, maxHeight: 45 }}>\r\n                  <BottomNavigationAction icon={<GitHub />} href=\"https://github.com/dillanmann/scotgov-covid-chart\"></BottomNavigationAction>\r\n                  <BottomNavigationAction icon={<Twitter />} href=\"https://twitter.com/dillanmann\"></BottomNavigationAction>\r\n                </BottomNavigation>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Query>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme, responsiveFontSizes, CssBaseline } from \"@material-ui/core\";\n\nconst theme = responsiveFontSizes(createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n}));\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline>\n        <App />\n      </CssBaseline>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}